npm init

git ignore generator

JS having two types of import 
common js and module
    // In module.js
    const myDefaultValue = "Hello";
    export default myDefaultValue;

    // In anotherFile.js
    import customName from './module.js';

go to package.json 
  "type": "module"

nodemon it automatically restart the server without being failed
 Why? ===> when run in npm run dev or start it runs but problem is
           when you make any changes in code it doesn't reflect the change 
           to reflect it you need to restart the project, the solution for this is 
           nodemon

nodemon install two ways:
 dependency and dev dependency
    dev dependency ---> used for development not in produciton

sahil@Sahil MINGW64 ~/Desktop/BackEnd/Project
$ npm i -D nodemon

see in package.json 
 "devDependencies": {
    "nodemon": "^3.1.10"
 }

Now, go to scripts in package.json
    edit it 
    from : 
        "scripts": {
            "test": "bla bla bla"
        }
    to : 
        "scripts": {
            "dev": "nodemon src/index.js"
         }

sahil@Sahil MINGW64 ~/Desktop/BackEnd/Project
$ npm i -D prettier
It helps for team to build projects on same platform it is plugin 

For data base connection go to 
mongo db atlas (atlas is a sub service provided by mongo db which provide online db)

sahil@Sahil MINGW64 ~/Desktop/BackEnd/Project (main)
$ npm i mongoose express dotenv

Sometimes Problems happen in data base so 2 approaches:
 1. wrap the db in try catch or promise (resolve or reject)
 2. Require time use async wait

Mine Data Base:
 Username: BROPATING
 Password : SAHIL123
 link: mongodb+srv://BROPATING:SAHIL123@cluster0.ne6fthe.mongodb.net
CAUTION: remove "/" in last 

As early as possible in your application, import and configure dotenv
such that all the environment variables are available to all the files 
Go to package.json to do experiment
 "scripts": {
    "dev": "nodemon -r dotev/config --experimental-json-modules src/index.js"
  }, 
  Throw error not handling
  "scripts": {
    "dev": "nodemon -r dotev/config src/index.js"
  },

When any change in .env file you want to again restart the file 
mean nodemon will not identify the change 

Cookies are small text files that websites store on your computer or other devices to 
remember information about you and your browsing activity. 
They help websites remember things like your login details, shopping cart contents,
or preferences, making your browsing experience more convenient and personalized. 

A "cookie parser" is a middleware that, in the context of web development 
(often within Node.js frameworks like Express), handles the parsing of HTTP cookies. 
It takes the incoming cookies sent in the HTTP request, processes them, and makes 
them readily available for use within your application logic. 

CORS, or Cross-Origin Resource Sharing, is a browser security mechanism that 
controls how web pages can make requests to a different domain than the one 
that served the page.

We use app.use when we use middleware or configuration setting

sahil@Sahil MINGW64 ~/Desktop/BackEnd/Project (main)
$ npm i cookie-parser cors

ctr + space to see other options

When search in google it add the string in the url 
Ex. porsche 911 then in url ...porsche+911 or sometime %20 is there
For this we use app.use(express.urlencoded({}))

Search nodejs api error => it gives the error class

Model Link ----> https://app.eraser.io/workspace/YtPqZ1VogxGy1jzIDkzj

Moongose Agrregate pipeline => 
https://www.npmjs.com/package/mongoose-aggregate-paginate-v2
npm i mongoose-aggregate-paginate-v2

Becrypt library => 
https://www.npmjs.com/package/bcrypt
npm i bcrypt

JsonWebToken => 
npm i jsonwebtoken

sahil@Sahil MINGW64 ~/Desktop/BackEnd/Project (main)
$ npm i cloudinary 
Cloudinary is a cloud-based service that provides a platform for managing, 
optimizing, and delivering images and videos for websites and mobile applications. 
It offers a range of features including upload, storage, manipulation, optimization, 
and delivery of visual media.

sahil@Sahil MINGW64 ~/Desktop/BackEnd/Project (main)
$ npm i multer
Multer is a Node.js middleware designed to handle multipart/form-data, 
primarily used for uploading files to a server. 
It simplifies the process of receiving and managing file uploads in 
web applications built with frameworks like Express. 

// route import
import userRouter from './routes/user.routes.js';

// routes decalration 
app.use("/users", userRouter);
//https://localhost:8000/users/register
router.route("/register").post(registerUser);

A refresh token is a special credential used to obtain new access tokens, 
allowing users to stay authenticated without repeatedly logging in. 

An access token is a credential that allows an application or user to access 
protected resources or services

A cookie, in the context of the internet, is a small piece of data that a website 
stores on a user's computer or mobile device. 
It's like a digital "note" that helps websites remember information about users, 
such as login details, preferences, or browsing history. 
This information helps websites personalize the user experience a
nd make it more convenient for repeat visits. 
